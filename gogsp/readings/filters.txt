This file aims to educate the reader on how the concept of filtering works in the context of Graph Signal Processing.

Let's start with a random weighted undirected graph with 4 vertices, represented as an adjacency matrix `A`:

     0    0.2 1.3  0
     0.2  0   0    0
     1.3  0   0    0.8
     0 0  0   0.8  0

Here, the weight between node i and j is the element at the intersection of row i and column j or `A[i,j]` above. 

Let's define a graph signal, `x`, over these four nodes as follows:

    x = [1 2 3 4]

Now, create an arbitrary graph filter with filter coefficients:

    h = [0.5 0.6 0.7 0.8] 

To actually apply the filter, we need to operate in the spectral domain. For this, we need to compute the Graph Laplacian, `L`, from the adjacency matrix `A`:
    L = D - A 
where `D` is a diagonal matrix containing the degrees (sum of connection weights) of the nodes. For our graph above, `D` would be:

    D = [1.5 0.2 2.1 0.8]
    L = [1.5   -0.2   -1.3   0 
         -0.2   0.2     0    0 
         -1.3    0    2.1  -0.8 
           0     0   -0.8   0.8]

Solving the eigen-decomposition of this Laplacian, `L=UΛU'` (U being the matrix of eigenvectors and Λ the diagonal matrix of eigenvalues), we are ready to compute a spectral representation of the signal `x`. 

For simplicity, let's assume that we get:

    U = [1 0 0 0
         0 1 0 0
         0 0 1 0
         0 0 0 1]

         
    Λ = [1.5 0 0 0 
         0 0.2 0 0 
         0 0 2.1 0 
         0 0 0 0.8]

The GFT of `x` is `x_hat = U'x`, 

    x_hat = GFT(x) = [1 2 3 4] 

To apply the filter `h` coefficients to `x`, for a spectral filter it would be, `h(x) = U (H Λ) U'x`, where `H` is a diagonal matrix with our `h` coefficients.

    H = [0.5 0 0 0
         0 0.6 0 0
         0 0 0.7 0
         0 0 0 0.8]

And then, 

    h(x) = U (H Λ) U'x 
         = [1 0 0 0] 
               [0.75 0 0 0 
               0 0.12 0 0 
               0 0 1.47 0 
               0 0 0 0.64] 
               [1 0 0 0] 
                   [1
                   2
                   3
                   4]
         = [0.75 0.12 1.47 0.64] 

Therefore, applying the defined filter to our example graph signal, the signal is transformed to `[0.75, 0.12, 1.47, 0.64]`. 

This simplfied example illustrates the process of filtering a graph signal.
Please note that in a real world scenario, the graph Laplacian likely does not have an identity matrix as its eigenvector matrix and you would need to calculate the actual values. That would cause the graph signal to change more noticeably when applying the GFT and the filter.
